{
  "openapi": "3.0.0",
  "paths": {
    "/api/products": {
      "get": {
        "operationId": "ProductController_getAllProducts",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all products",
        "tags": [
          "Products"
        ]
      },
      "post": {
        "operationId": "ProductController_createProduct",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new product",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/{productId}": {
      "get": {
        "operationId": "ProductController_getProductById",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a product by ID",
        "tags": [
          "Products"
        ]
      },
      "patch": {
        "operationId": "ProductController_updateProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a product by ID",
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "operationId": "ProductController_deleteProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a product by ID",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/name/{name}": {
      "get": {
        "operationId": "ProductController_getProductByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a product by name",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/slug/{slug}": {
      "get": {
        "operationId": "ProductController_getProductBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a product by slug",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/variant/{variantId}": {
      "get": {
        "operationId": "ProductController_getProductByVariantId",
        "parameters": [
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a product by variant ID",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/find-many": {
      "post": {
        "operationId": "ProductController_getProductsByIds",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get multiple products by IDs",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/orders": {
      "post": {
        "description": "This endpoint creates a new order with order items, customer details, delivery info, and payment info.",
        "operationId": "OrderController_createOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The data required to create a new order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The order has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Validation error. Ensure all required fields are filled correctly."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new order",
        "tags": [
          "Orders"
        ]
      },
      "get": {
        "description": "Fetch a list of all orders. Each order includes order items, customer details, delivery info, and payment info.",
        "operationId": "OrderController_getAllOrders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of orders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all orders",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{internalId}": {
      "get": {
        "description": "Fetch the details of a single order by its unique identifier.",
        "operationId": "OrderController_getOrderByInternalId",
        "parameters": [
          {
            "name": "internalId",
            "required": true,
            "in": "path",
            "description": "The unique internalId of the order to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found. Ensure the provided internalId is correct."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve a single order by ID",
        "tags": [
          "Orders"
        ]
      },
      "patch": {
        "description": "Update the details of an order by its internal identifier.",
        "operationId": "OrderController_updateOrderByInternalId",
        "parameters": [
          {
            "name": "internalId",
            "required": true,
            "in": "path",
            "description": "The internal ID of the order to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The data to update the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found. Ensure the provided internal ID is correct."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an order by internal ID",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/users/register": {
      "post": {
        "operationId": "UserController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "Username already exists"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful. Returns access token."
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/test": {
      "post": {
        "operationId": "AuthController_test",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    }
  },
  "info": {
    "title": "MY-LINE Backend API",
    "description": "The MY-LINE API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "ProductImageDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the image"
          },
          "alt": {
            "type": "string",
            "description": "Alt text for the image"
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Indicates if this is the primary image",
            "default": false
          }
        },
        "required": [
          "url"
        ]
      },
      "ProductVariantDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The autogenerated ID of the variant",
            "readOnly": true
          },
          "size": {
            "type": "string",
            "description": "size of the variant"
          },
          "color": {
            "type": "string",
            "description": "color of the variant"
          },
          "quantity": {
            "type": "number",
            "description": "quantity of the variant"
          },
          "images": {
            "description": "Images associated with the product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductImageDto"
            }
          }
        },
        "required": [
          "id",
          "size",
          "color",
          "quantity",
          "images"
        ]
      },
      "PackageDto": {
        "type": "object",
        "properties": {
          "height": {
            "type": "number",
            "description": "Height of the package"
          },
          "length": {
            "type": "number",
            "description": "Length of the package"
          },
          "width": {
            "type": "number",
            "description": "Width of the package"
          },
          "weight": {
            "type": "number",
            "description": "Weight of the package"
          }
        }
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The autogenerated ID of the product",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "description": "The slug of the product"
          },
          "name": {
            "type": "string",
            "description": "The name of the product"
          },
          "description": {
            "type": "string",
            "description": "The description of the product"
          },
          "price": {
            "type": "number",
            "description": "The price of the product"
          },
          "variants": {
            "description": "The variants (size, color) of the product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            }
          },
          "vendorCode": {
            "type": "string",
            "description": "The vendor code of the product"
          },
          "composition": {
            "type": "string",
            "description": "The composition of the product"
          },
          "careInstructions": {
            "type": "string",
            "description": "The care instructions for the product"
          },
          "measurements": {
            "type": "string",
            "description": "Measurements of the product"
          },
          "modelParams": {
            "type": "string",
            "description": "Model parameters for the product"
          },
          "package": {
            "description": "The delivery package dimensions and weight",
            "allOf": [
              {
                "$ref": "#/components/schemas/PackageDto"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the product is active"
          }
        },
        "required": [
          "productId",
          "slug",
          "name",
          "description",
          "price",
          "variants"
        ]
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {}
      },
      "OrderItemDto": {
        "type": "object",
        "properties": {
          "variantId": {
            "type": "string",
            "description": "The ID of the product variant being ordered"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the product in the order"
          },
          "price": {
            "type": "number",
            "description": "The price of a single product unit"
          }
        },
        "required": [
          "variantId",
          "quantity",
          "price"
        ]
      },
      "LocalityDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the locality (e.g., city or town)"
          },
          "type": {
            "type": "string",
            "description": "Type of locality (e.g., urban, rural)"
          },
          "country": {
            "type": "string",
            "description": "Country of the locality"
          }
        },
        "required": [
          "name",
          "type",
          "country"
        ]
      },
      "CDEKAddressDto": {
        "type": "object",
        "properties": {
          "postcode": {
            "type": "string",
            "description": "Postal code of the address"
          },
          "city": {
            "type": "string",
            "description": "City name of the address"
          },
          "street": {
            "type": "string",
            "description": "Street name of the address"
          },
          "house": {
            "type": "string",
            "description": "House number of the address"
          },
          "apartment": {
            "type": "string",
            "description": "Apartment or flat number (optional)"
          },
          "locality": {
            "description": "Details about the locality",
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalityDto"
              }
            ]
          }
        },
        "required": [
          "postcode",
          "city",
          "street",
          "house",
          "locality"
        ]
      },
      "DeliveryInfoDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CDEK_PVZ",
              "TO_DOOR"
            ],
            "description": "Type of delivery: CDEK_PVZ or TO_DOOR"
          },
          "deliveryPrice": {
            "type": "number",
            "description": "Price of the delivery"
          },
          "address": {
            "description": "Delivery address details",
            "allOf": [
              {
                "$ref": "#/components/schemas/CDEKAddressDto"
              }
            ]
          },
          "pvzId": {
            "type": "string",
            "description": "CDEK pickup point ID (PVZ)"
          },
          "comment": {
            "type": "string",
            "description": "Optional comment for CDEK delivery"
          }
        },
        "required": [
          "type",
          "deliveryPrice"
        ]
      },
      "PaymentInfoDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "description": "The payment method, e.g., \"credit_card\""
          },
          "amount": {
            "type": "number",
            "description": "The total amount paid for the order"
          }
        },
        "required": [
          "method",
          "amount"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "List of items in the order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemDto"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the order",
            "enum": [
              "draft",
              "awaiting_payment",
              "paid",
              "payment_failed"
            ],
            "default": "draft"
          },
          "internalId": {
            "type": "string",
            "description": "The internal ID of the order"
          },
          "customerName": {
            "type": "string",
            "description": "The first name of the customer placing the order"
          },
          "customerSurname": {
            "type": "string",
            "description": "The last name of the customer placing the order"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the customer"
          },
          "email": {
            "type": "string",
            "description": "The email address of the customer"
          },
          "deliveryInfo": {
            "description": "Details of the delivery method and address",
            "allOf": [
              {
                "$ref": "#/components/schemas/DeliveryInfoDto"
              }
            ]
          },
          "paymentInfo": {
            "description": "Payment information for the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInfoDto"
              }
            ]
          },
          "consentGiven": {
            "type": "boolean",
            "description": "Whether the customer has given consent"
          },
          "consentDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when consent was given"
          }
        },
        "required": [
          "items",
          "status",
          "internalId",
          "customerName",
          "customerSurname",
          "phone",
          "email",
          "deliveryInfo",
          "consentGiven"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {}
      },
      "UpdateOrderDto": {
        "type": "object",
        "properties": {}
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username",
            "example": "john.doe"
          },
          "password": {
            "type": "string",
            "description": "Password",
            "example": "P@$$wOrd"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "User": {
        "type": "object",
        "properties": {}
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username",
            "example": "john.doe"
          },
          "password": {
            "type": "string",
            "description": "Password",
            "example": "password123"
          }
        },
        "required": [
          "username",
          "password"
        ]
      }
    }
  }
}